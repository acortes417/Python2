import csv
import sqlite3 as sq
def connect():
    #connect to the databse
    conn = sq.connect("UFC.sqlite")
    #create a cursor to the database
    curr = conn.cursor()
    return conn,curr
"""
create_db creates the databases
"""
def fill_heavyweight_db(conn, cur):
    with open('Heavyweights.csv', 'r', newline='') as file:
        reader = csv.DictReader(file)
        header = reader.fieldnames
        phone_number = 7144825333
        id_number = 5000001
        for i in reader:
            stats = []
            for j in header:
                stats.append(i[j])
            cmd = """
            INSERT INTO Mens_Heavyweights(
            name,
            age,
            sex,
            ID,
            phone_number,
            fights,
            strikes,
            take_downs,
            knock_downs,
            reversals,
            submissions,
            strike_accuracy,
            take_down_accuracy
            )
            VALUES(?,?,?,?,?,?,?,?,?,?,?,?,?)
            """
            cur.execute(cmd,(stats[0],stats[1],'male',id_number,phone_number,int(stats[2]),int(stats[3]),int(stats[5]),int(stats[7]),int(stats[8]),int(stats[9]),float(stats[4]),float(stats[6])))
            conn.commit
            phone_number += 3
            id_number += 1


def fill_middleweight_db(conn, cur):
    with open('middleweight.csv', 'r', newline='') as file:
        reader = csv.DictReader(file)
        header = reader.fieldnames
        phone_number = 7145327921
        id_number = 4000001
        for i in reader:
            stats = []
            for j in header:
                stats.append(i[j])
            cmd = """
            INSERT INTO Mens_Middleweights(
            name,
            age,
            sex,
            ID,
            phone_number,
            fights,
            strikes,
            take_downs,
            knock_downs,
            reversals,
            submissions,
            strike_accuracy,
            take_down_accuracy
            )
            VALUES(?,?,?,?,?,?,?,?,?,?,?,?,?)
            """
            cur.execute(cmd,(stats[0],stats[1],'male',id_number,phone_number,int(stats[2]),int(stats[3]),int(stats[5]),int(stats[7]),int(stats[8]),int(stats[9]),float(stats[4]),float(stats[6])))
            conn.commit
            phone_number += 3
            id_number += 1
            
def fill_womens_bantamweight_db(conn, cur):
    with open('womensbantamweight.csv', 'r', newline='') as file:
        reader = csv.DictReader(file)
        header = reader.fieldnames
        phone_number = 7145996090
        id_number = 3000001
        for i in reader:
            stats = []
            for j in header:
                stats.append(i[j])
            cmd = """
            INSERT INTO Womens_Bantaweight(
            name,
            age,
            sex,
            ID,
            phone_number,
            fights,
            strikes,
            take_downs,
            knock_downs,
            reversals,
            submissions,
            strike_accuracy,
            take_down_accuracy
            )
            VALUES(?,?,?,?,?,?,?,?,?,?,?,?,?)
            """
            cur.execute(cmd,(stats[0],stats[1],'male',id_number,phone_number,int(stats[2]),int(stats[3]),int(stats[5]),int(stats[7]),int(stats[8]),int(stats[9]),float(stats[4]),float(stats[6])))
            conn.commit
            phone_number += 3     
            id_number += 1

def fill_womens_strawweight_db(conn, cur):
    with open('womenstrawweight.csv', 'r', newline='') as file:
        reader = csv.DictReader(file)
        header = reader.fieldnames
        phone_number = 7143172612
        id_number = 1000001
        for i in reader:
            stats = []
            for j in header:
                stats.append(i[j])
            cmd = """
            INSERT INTO Womens_Bantaweight(
            name,
            age,
            sex,
            ID,
            phone_number,
            fights,
            strikes,
            take_downs,
            knock_downs,
            reversals,
            submissions,
            strike_accuracy,
            take_down_accuracy
            )
            VALUES(?,?,?,?,?,?,?,?,?,?,?,?,?)
            """
            cur.execute(cmd,(stats[0],stats[1],'male',id_number,phone_number,int(stats[2]),int(stats[3]),int(stats[5]),int(stats[7]),int(stats[8]),int(stats[9]),float(stats[4]),float(stats[6])))
            conn.commit
            phone_number += 3    
            id_number += 1   

def fill_awards(conn,cur):
    with open('awards.csv', 'r', newline='') as file:
        reader = csv.DictReader(file)
        header = reader.fieldnames
    
        for i in reader:
            stats = []
            for j in header:
                stats.append(i[j])
            cmd = """
            INSERT INTO Awards(event,place,award)
            VALUES(?,?,?)
            """
            cur.execute(cmd,(stats[0],stats[1],stats[2]))
            conn.commit

def fill_competitions(conn,cur):
    with open('competitions.csv', 'r', newline='') as file:
        reader = csv.DictReader(file)
        header = reader.fieldnames
        for i in reader:
            stats = []
            for j in header:
                stats.append(i[j])
            print(stats)
            cmd = """
            INSERT INTO Competitions(event,start_time,date)
            VALUES(?,?,?)
            """
            cur.execute(cmd,(stats[0],stats[1],stats[2]))
            conn.commit
            
def create_db(conn, cur):
    cur.executescript("""
    DROP TABLE IF EXISTS Mens_Heavyweights;
    DROP TABLE IF EXISTS Mens_Middleweights;
    DROP TABLE IF EXISTS Womens_Bantaweight;
    DROP TABLE IF EXISTS Womens_Strawweight;
    DROP TABLE IF EXISTS Awards;
    DROP TABLE IF EXISTS Competitions;
    """)
    
    # create Tables
    create_tables = """
    CREATE TABLE Mens_Heavyweights(
        name TEXT,
        age TEXT,
        sex TEXT,
        ID INTEGER UNIQUE,
        phone_number INTEGER UNIQUE,
        fights INTEGER,
        strikes INTEGER,
        take_downs INTEGER,
        knock_downs INTEGER,
        reversals INTEGER,
        submissions INTEGER,
        strike_accuracy REAL,
        take_down_accuracy REAL
        );
    CREATE TABLE Mens_Middleweights(
        name TEXT,
        age TEXT,
        sex TEXT,
        ID INTEGER UNIQUE,
        phone_number INTEGER UNIQUE,
        fights INTEGER,
        strikes INTEGER,
        take_downs INTEGER,
        knock_downs INTEGER,
        reversals INTEGER,
        submissions INTEGER,
        strike_accuracy REAL,
        take_down_accuracy REAL
        );
    CREATE TABLE Womens_Bantaweight(
        name TEXT,
        age TEXT,
        sex TEXT,
        ID INTEGER UNIQUE,
        phone_number INTEGER UNIQUE,
        fights INTEGER,
        strikes INTEGER,
        take_downs INTEGER,
        knock_downs INTEGER,
        reversals INTEGER,
        submissions INTEGER,
        strike_accuracy REAL,
        take_down_accuracy REAL
        );
    CREATE TABLE Womens_Strawweight(
        name TEXT,
        age TEXT,
        sex TEXT,
        ID INTEGER UNIQUE,
        phone_number INTEGER UNIQUE,
        fights INTEGER,
        strikes INTEGER,
        take_downs INTEGER,
        knock_downs INTEGER,
        reversals INTEGER,
        submissions INTEGER,
        strike_accuracy REAL,
        take_down_accuracy REAL
        );
    CREATE TABLE Awards(
        event TEXT,
        place TEXT,
        award TEXT
    );
    CREATE TABLE Competitions(
        event TEXT,
        start_time TEXT,
        date TEXT
    )
    """
    cur.executescript(create_tables)
    conn.commit

def test_db(conn,cur):
    cmd = """
    SELECT * FROM Mens_Heavyweights
    """
    cur.execute(cmd)
    stats = cur.fetchall()
    for i in stats:
        print(i)
    
    cmd = """
    SELECT * FROM Mens_Middleweights
    """
    cur.execute(cmd)
    stats = cur.fetchall()
    for i in stats:
        print(i)
    
    cmd = """
    SELECT * FROM Womens_Bantaweight
    """
    cur.execute(cmd)
    stats = cur.fetchall()
    for i in stats:
        print(i)
    
    cmd = """
    SELECT * FROM Womens_Strawweight
    """
    cur.execute(cmd)
    stats = cur.fetchall()
    for i in stats:
        print(i)
        
    cmd = """
    SELECT * FROM Awards
    """
    cur.execute(cmd)
    stats = cur.fetchall()
    for i in stats:
        print(i)
        
    cmd = """
    SELECT * FROM Competitions
    """
    cur.execute(cmd)
    stats = cur.fetchall()
    for i in stats:
        print(i)
        
def add_fighter(conn,cur,database):
    
    cmd = "SELECT COUNT(*) FROM {}".format(database)
    cur.execute(cmd)
    size = cur.fetchall()
    if size[0][0] >= 16:
        print("Sorry, this competition is full")
    else:
        text = ['name','age','sex']
        integer = ['id number','phone number','fights','strikes','take downs','knock downs','reversals','submissions']
        DOUBLE = ['strike accuracy','take down accuracy']
        print("In order to add a comptetor you need to provid some information")
        tupe = ()
        for i in text:
            info = input("Enter the competetors {} ".format(i))
            tupe += (info,)
        for i in integer:
            info = int(input("How many {} do they have ".format(i)))
            tupe += (info,)
        for i in DOUBLE:
            info = float(input("What is their {} ".format(i)))
            tupe += (info,)
        
        cmd = """
            INSERT INTO {}(
            name,
            age,
            sex,
            ID,
            phone_number,
            fights,
            strikes,
            take_downs,
            knock_downs,
            reversals,
            submissions,
            strike_accuracy,
            take_down_accuracy
            )
            VALUES(?,?,?,?,?,?,?,?,?,?,?,?,?)
            """.format(database)
        cur.execute(cmd,tupe)
        conn.commit
def generate_graph(x, y, user):
    # Graphing fighter's efficiency either when striking or attempting take downs
    # Paramters will be x and y axis, along with string that speficies type of graph
    # x = total number of strikes/takedowns
    # y = striking accuaracy/take down accuracy
    fig = plt.figure()
    ax = fig.subplots(1, 1)
    ax.scatter(x, y, c="b", marker='8')

    if user.lower() == 's':
        ax.set_title("Striking Efficiency")
        ax.set_xlabel("Total Strikes")
        ax.set_ylabel("Strike Accuracy")
    elif user.lower() == "t":
        ax.set_title("Take Down Efficiency")
        ax.set_xlabel("Total Take Downs")
        ax.set_ylabel("Take Down Accuracy")


    fig.savefig("UFC_Graph.png")


# NEEDED FUNCTIONS
# User functions (modify and delete records)
# Many-to-Many relationship with corresponding junction table
# Dynamically generate graph of database

# DISPLAYS
# All competitors alphabetically, male comps, female comps, comps and id numbers
# All events by starting time, comps in each event, winner of each event

# ALLOW USER TO LOOK UP
# Person's id given name, event, and age
# Person's info given id
# Person's overall stat correlated to wins given name or id
# Person's awards given id

def main():
    conn , cur = connect()
    create_db(conn,cur)
    fill_heavyweight_db(conn,cur)
    fill_middleweight_db(conn,cur)
    fill_womens_bantamweight_db(conn,cur)
    fill_womens_strawweight_db(conn,cur)
    #test_db(conn,cur)
    generate_graph([80, 70, 90, 50], [10.5, 26.7, 38.9, 45.6], 's')     # List of fighter's strikes, then list of fighter's accuracy
if __name__ == "__main__":
    main()
